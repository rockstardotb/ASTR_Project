# Standard python numerical analysis imports:
import numpy as np
from scipy import signal
from scipy.interpolate import interp1d
from scipy.signal import butter, filtfilt, iirdesign, zpk2tf, freqz

# the ipython magic below must be commented out in the .py file, since it doesn$
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import argparse
import sys
import numpy as np
import matplotlib.pyplot as plt
parser = argparse.ArgumentParser() 
parser.add_argument('-h1',    default='StrainH1.txt',    help='text file with hdf5 data')
parser.add_argument('-l1',    default='StrainL1.txt',    help='text file with hdf5 data')
args=parser.parse_args()
H1=args.h1
L1=args.l1
timeH1=[]
timeL1 = []
strainH1 = []
strainL1 = []
def readH1(x):
	global H1,time,strainH1
	plt.rcParams['agg.path.chunksize'] = 10000

	i=0

	with open(H1, 'r') as f:
		for row in f:
			if row=="NaN":
				i+=1
			else:
				timeH1.append(float(0.00024414063955*i))
				strainH1.append(float(row))
				i+=1
#	plt.plot(timeH1,strainH1)
	return timeH1
	return strainH1
def readL1(x):
        global L1,time,strainL1
        plt.rcParams['agg.path.chunksize'] = 10000

        i=0

        with open(L1, 'r') as f:
                for row in f:
                        if row=="NaN":
                                i+=1
                        else:
                                timeL1.append(float(0.00024414063955*i))
                                strainL1.append(float(row))
                                i+=1
#        plt.plot(timeL1,strainL1)
        return timeL1
        return strainL1
readH1(H1)
readL1(L1)
#plt.savefig('raw'+H1+L1+'.png')
#plt.show()
fs= 4096 # number of seconds in sample
dt=timeH1[1]-timeH1[0]
# number of sample for the fast fourier transform:
NFFT = 1*fs
fmin = 10
fmax = 2000
Pxx_H1, freqs = mlab.psd(strainH1, Fs=fs, NFFT=NFFT)
Pxx_L1, freqs = mlab.psd(strainL1, Fs = fs, NFFT = NFFT)
# We will use interpolations of the ASDs computed above for whitening:
# Below, data less than zero is being created in the array psd_H1.
# Consider writing a loop to change values less than zero to zero.
psd_H1 = interp1d(freqs, Pxx_H1,copy= True,bounds_error=False,fill_value=0.1*10**(-75))
psd_L1 = interp1d(freqs, Pxx_L1,copy= True,bounds_error=False,fill_value=0.1*10**(-75))

# plot the ASDs:
#plt.figure()
#plt.loglog(freqs, np.sqrt(Pxx_H1),'r',label='H1 strain')
#plt.loglog(freqs, np.sqrt(Pxx_L1),'g',label='L1 strain')
#plt.axis([fmin, fmax, 1e-24, 1e-19])
#plt.grid('on')
#plt.ylabel('ASD (strain/rtHz)')
#plt.xlabel('Freq (Hz)')
#plt.legend(loc='upper center')
#plt.title('Advanced LIGO strain data')
#plt.savefig('New_ASDs'+H1+L1+'.png')
#plt.show()


# function to writen data
def whiten(strain, interp_psd, dt):
    Nt = len(strain)
    freqs = np.fft.rfftfreq(Nt, dt)

    # whitening: transform to freq domain, divide by asd, then transform back,
    # taking care to get normalization right.
    hf = np.fft.rfft(strain)
    #**********************************************************#
    white_hf = hf / (np.sqrt(interp_psd(freqs)/dt/2.))
    white_ht = np.fft.irfft(white_hf, n=Nt)
    return white_ht
    #***********************************************************#
    white_hf = hf / (np.sqrt(interp_psd(freqs) /dt/2.))
    white_ht = np.fft.irfft(white_hf, n=Nt)
    return white_ht

# now whiten the data from H1 and L1, and also the NR template:
print (psd_H1)
strain_H1_whiten = whiten(strainH1,psd_H1,dt)
strain_L1_whiten = whiten(strainL1,psd_L1,dt)
#NR_H1_whiten = whiten(NR_H1,psd_H1,dt)

# We need to suppress the high frequencies with some bandpassing:
bb, ab = butter(4, [10.0*2/fs,300*2/fs], btype='band') # fiddle with numbers instead of '16'
strain_H1_whitenbp = filtfilt(bb, ab, strain_H1_whiten)
strain_L1_whitenbp = filtfilt(bb, ab, strain_L1_whiten)
#NR_H1_whitenbp = filtfilt(bb, ab, NR_H1_whiten)
# plot the data after whitening:
# first, shift L1 by 7 ms, and invert. See the GW150914 detection paper for why!
strain_L1_shift = -np.roll(strain_L1_whitenbp,int(0.007*fs))

plt.plot(timeH1,strain_H1_whitenbp,'r',label='H1 strain')
plt.plot(timeL1,strain_L1_shift,'g',label='L1 strain')
#plt.plot(NRtime+0.002,NR_H1_whitenbp,'k',label='matched NR waveform')
if np.sum(timeH1)<=2100000:
	plt.xlim([0,32])
else:
	plt.xlim([0,4096])
plt.ylim([-4,4])
plt.xlabel('time (s)')
plt.ylabel('whitented strain')
plt.legend(loc='lower left')
plt.title('Advanced LIGO WHITENED strain data')
plt.savefig('NEW_strain_whitened'+H1+L1+'.png')
plt.show()

if np.sum(timeH1)<=2100000:
	for x,y,x1,y1 in zip(timeH1[1000:120000],strain_H1_whitenbp[1000:120000],timeL1[1000:120000],strain_L1_shift[1000:120000]):
		if y>1.75 and y1>1.75:
			print('H1: (',x,',',y,')\tL1:(',x1,',',y1,')')
		else:
			continue
else:
        for x,y,x1,y1 in zip(timeH1[5000000:11000000],strain_H1_whitenbp[5000000:11000000],timeL1[5000000:11000000],strain_L1_shift[5000000:11000000]):
                if y>1.75 and y1>1.75:
                        print('H1: (',x,',',y,')\tL1:(',x1,',',y1,')')
                else:
                        continue
