
import os
# Standard python numerical analysis imports:
import numpy as np
from scipy import signal
from scipy.interpolate import interp1d
from scipy.signal import butter, filtfilt, iirdesign, zpk2tf, freqz

# the ipython magic below must be commented out in the .py file, since it doesn$
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import argparse
import sys
import numpy as np
import matplotlib.pyplot as plt
parser = argparse.ArgumentParser() 
parser.add_argument('-i',    default=0,    help='starting index of list of 100% data files')
parser.add_argument('-f',    default=1,    help='ending index of list of 100% data files')
args=parser.parse_args()
I=args.i
F=args.f
list=[]
array=np.loadtxt('list.txt',dtype=int)
list=array[I:F]
print(list)
index=I
for row in list:		
	import urllib.request
	file_nameH1="H-H1_LOSC_4_V1-"+str(row)+"-4096.hdf5"
	file_nameL1="L-L1_LOSC_4_V1-"+str(row)+"-4096.hdf5"
	urlL1="https://losc.ligo.org/archive/data/S6/931135488/L-L1_LOSC_4_V1-"+str(row)+"-4096.hdf5"
	urlH1="https://losc.ligo.org/archive/data/S6/931135488/H-H1_LOSC_4_V1-"+str(row)+"-4096.hdf5"
	urllib.request.urlretrieve(urlL1, file_nameL1)
	urllib.request.urlretrieve(urlH1, file_nameH1)
	os.system("h5dump -d /strain/Strain -y -w 1 -o "+file_nameH1+".txt "+file_nameH1)
	os.system("h5dump -d /strain/Strain -y -w 1 -o "+file_nameL1+".txt "+file_nameL1)
	timeH1=[]
	timeL1 = []
	comma_strainH1=[]
	comma_strainL1=[]
	strainH1 = []
	strainL1 = []
	def readH1():
		global H1,time,strainH1
		plt.rcParams['agg.path.chunksize'] = 10000

		i=0
		with open(file_nameH1+".txt", 'r') as f:
			for row in f:
				if row==' ':
					continue
				else:
					comma_strainH1.append(row.strip())
			filter(None, comma_strainH1)
			os.system("rm "+file_nameH1+".txt")	
			for row in comma_strainH1:
				if row=="NaN":
					i+=1
				elif row=="":
					continue
				else:
					timeH1.append(float(0.00024414063955*i))
					strainH1.append(float(row.strip(',')))
					i+=1
	#	plt.plot(timeH1,strainH1)
		return timeH1
		return strainH1
	def readL1():
		global L1,time,strainL1
		plt.rcParams['agg.path.chunksize'] = 10000

		i=0

		with open(file_nameL1+".txt", 'r') as f:
			for row in f:
				comma_strainL1.append(row.strip())
			filter(None, comma_strainL1)
			os.system("rm "+file_nameL1+".txt")
			for row in comma_strainL1:
				if row=="NaN":
					i+=1
				elif row=="":
					continue
				else:
					timeL1.append(float(0.00024414063955*i))
					strainL1.append(float(row.strip(',')))
					i+=1
		#        plt.plot(timeL1,strainL1)
		return timeL1
		return strainL1
	os.system("rm "+file_nameH1)
	os.system("rm "+file_nameL1)
	readH1()
	readL1()
	#plt.savefig('raw'+H1+'.png')
	#plt.show()
	fs= 4096 # number of seconds in sample
	dt=timeH1[1]-timeH1[0]
	# number of sample for the fast fourier transform:
	NFFT = 1*fs
	fmin = 10
	fmax = 2000
	Pxx_H1, freqs = mlab.psd(strainH1, Fs=fs, NFFT=NFFT)
	Pxx_L1, freqs = mlab.psd(strainL1, Fs = fs, NFFT = NFFT)
	# We will use interpolations of the ASDs computed above for whitening:
	# Below, data less than zero is being created in the array psd_H1.
	# Consider writing a loop to change values less than zero to zero.
	psd_H1 = interp1d(freqs, Pxx_H1,copy= True,bounds_error=False,fill_value=0.1*10**(-75))
	psd_L1 = interp1d(freqs, Pxx_L1,copy= True,bounds_error=False,fill_value=0.1*10**(-75))
	
	# plot the ASDs:
	#plt.figure()
	#plt.loglog(freqs, np.sqrt(Pxx_H1),'r',label='H1 strain')
	#plt.loglog(freqs, np.sqrt(Pxx_L1),'g',label='L1 strain')
	#plt.axis([fmin, fmax, 1e-24, 1e-19])
	#plt.grid('on')
	#plt.ylabel('ASD (strain/rtHz)')
	#plt.xlabel('Freq (Hz)')
	#plt.legend(loc='upper center')
	#plt.title('Advanced LIGO strain data')
	#plt.savefig('New_ASDs'+H1+'.png')
	#plt.show()
	
	
	# function to writen data
	def whiten(strain, interp_psd, dt):
	    Nt = len(strain)
	    freqs = np.fft.rfftfreq(Nt, dt)
	
	    # whitening: transform to freq domain, divide by asd, then transform back,
	    # taking care to get normalization right.
	    hf = np.fft.rfft(strain)
	    #**********************************************************#
	    white_hf = hf / (np.sqrt(interp_psd(freqs)/dt/2.))
	    white_ht = np.fft.irfft(white_hf, n=Nt)
	    return white_ht
	    #***********************************************************#
	    white_hf = hf / (np.sqrt(interp_psd(freqs) /dt/2.))
	    white_ht = np.fft.irfft(white_hf, n=Nt)
	    return white_ht
	
	# now whiten the data from H1 and L1, and also the NR template:
	strain_H1_whiten = whiten(strainH1,psd_H1,dt)
	strain_L1_whiten = whiten(strainL1,psd_L1,dt)
	#NR_H1_whiten = whiten(NR_H1,psd_H1,dt)
	
	# We need to suppress the high frequencies with some bandpassing:
	bb, ab = butter(4, [10.0*2/fs,300*2/fs], btype='band') # fiddle with numbers instead of '16'
	strain_H1_whitenbp = filtfilt(bb, ab, strain_H1_whiten)
	strain_L1_whitenbp = filtfilt(bb, ab, strain_L1_whiten)
	#NR_H1_whitenbp = filtfilt(bb, ab, NR_H1_whiten)
	# plot the data after whitening:
	# first, shift L1 by 7 ms, and invert. See the GW150914 detection paper for why!
	strain_L1_shift = -np.roll(strain_L1_whitenbp,int(0.007*fs))
	
	plt.plot(timeH1,strain_H1_whitenbp,'r',label='H1 strain')
	plt.plot(timeL1,strain_L1_shift,'g',label='L1 strain')
	#plt.plot(NRtime+0.002,NR_H1_whitenbp,'k',label='matched NR waveform')
	if np.sum(timeH1)<=2100000:
		plt.xlim([0,32])
	else:
		plt.xlim([0,4096])
	plt.ylim([-4,4])
	plt.xlabel('time (s)')
	plt.ylabel('whitented strain')
	plt.legend(loc='lower left')
	plt.title('Advanced LIGO WHITENED strain data')
	plt.savefig('NEW_strain_whitened'+file_nameH1+'.png')
	plt.show()
	time_start=0
	time_end=0
	# Search through 32 second data for spikes
	if np.sum(timeH1)<=2100000:
		# Index starts where the skipped section ends
		index=1000
		# Skips the first and last segment of data since it is just noise
		for x,y,x1,y1 in zip(timeH1[1000:120000],strain_H1_whitenbp[1000:120000],timeL1[1000:120000],strain_L1_shift[1000:120000]):
			# Threshold is set here
			if y>1.75 and y1>1.75:
				print('H1: (',x,',',y,')\tL1:(',x1,',',y1,')')
				# This is the start time for the zoomed in plot
				if time_start==0:
					time_start=index-100
				time_end=index+100
				index+=1
			else:
				index+=1
				continue
	# This searches through the 4096 second data files
	else:
	        # Index starts where the skipped section ends
	        index=5000000
	        # This skips the first and last segments of noise
	        for x,y,x1,y1 in zip(timeH1[5000000:11000000],strain_H1_whitenbp[5000000:11000000],timeL1[5000000:11000000],strain_L1_shift[5000000:11000000]):
	                # The threshold is set here
	                if y>1.5 and y1>1.5:
	                        print('H1: (',x,',',y,')\tL1:(',x1,',',y1,')')
	                        # This is the start time for the zoomed in plot
	                        if time_start==0:
	                                time_start=index-100
	                        time_end=index+100
	                        index+=1
	                else:
	                        index+=1
	                        continue
	# Plot only if a spike above the specified threshold was found
	if time_end > time_start:
		plt.plot(timeH1,strain_H1_whitenbp,'r',label='H1 strain')
		plt.plot(timeL1,strain_L1_shift,'g',label='L1 strain')
		#plt.plot(NRtime+0.002,NR_H1_whitenbp,'k',label='matched NR waveform')
		plt.xlim((time_start*0.000244),(time_end*0.000244))
		plt.ylim([-4,4])
		plt.xlabel('time (s)')
		plt.ylabel('whitented strain')
		plt.legend(loc='lower left')
		plt.title('Advanced LIGO WHITENED strain data')
		plt.savefig('ZoomedNEW_strain_whitened'+file_nameH1+'.png')
		plt.show()
	os.system("rm "+file_nameH1)
	os.system("rm "+file_nameL1)
	index+=1
